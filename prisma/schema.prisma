generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  INACTIVE
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}

enum ConnectionType {
  CSV
  API
  MANUAL
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TradeSide {
  LONG
  SHORT
}

enum TradeSource {
  CSV
  API
  MANUAL
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SyncStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  emailVerified  DateTime?
  hashedPassword String?
  name           String?
  timezone       String?          @default("UTC")
  tradingStyle   String?
  role           UserRole         @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  subscriptions  Subscription[]
  tradingAccounts TradingAccount[]
  importFiles    ImportFile[]
  tradeNotes     TradeNote[]
  trades         Trade[]
  tradeTags      TradeTag[]

  authAccounts   Account[]
  sessions       Session[]
}

model Plan {
  id                  String          @id @default(cuid())
  name                String
  slug                String          @unique
  description         String?
  stripeProductId     String?
  stripePriceId       String?
  monthlyPriceCents   Int
  maxAccounts         Int
  isDefault           Boolean         @default(false)
  isActive            Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  subscriptions       Subscription[]
}

model Subscription {
  id                     String             @id @default(cuid())
  userId                 String
  planId                 String
  status                 SubscriptionStatus @default(TRIALING)
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  cancelAtPeriodEnd      Boolean            @default(false)
  canceledAt             DateTime?
  trialEndsAt            DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  user                   User               @relation(fields: [userId], references: [id])
  plan                   Plan               @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
  @@index([status])
}

model TradingAccount {
  id                String        @id @default(cuid())
  userId            String
  name              String
  broker            String?
  connectionType    ConnectionType
  status            AccountStatus @default(ACTIVE)
  externalAccountId String?
  lastSyncedAt      DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id])
  trades            Trade[]
  importFiles       ImportFile[]
  syncLogs          SyncLog[]

  @@index([userId])
  @@index([status])
}

model Trade {
  id                String        @id @default(cuid())
  userId            String
  tradingAccountId  String
  symbol            String
  side              TradeSide
  quantity          Decimal       @db.Decimal(20, 8)
  entryPrice        Decimal?      @db.Decimal(20, 8)
  exitPrice         Decimal?      @db.Decimal(20, 8)
  stopLoss          Decimal?      @db.Decimal(20, 8)
  takeProfit        Decimal?      @db.Decimal(20, 8)
  fees              Decimal?      @db.Decimal(20, 8)
  profitLoss        Decimal?      @db.Decimal(20, 8)
  rMultiple         Decimal?      @db.Decimal(12, 6)
  openedAt          DateTime
  closedAt          DateTime?
  source            TradeSource   @default(MANUAL)
  externalId        String?
  strategyTag       String?
  notes             String?
  meta              Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id])
  tradingAccount    TradingAccount @relation(fields: [tradingAccountId], references: [id])
  tradeNotes        TradeNote[]
  tags              TradeTagAssignment[]

  @@index([tradingAccountId])
  @@index([userId, openedAt])
  @@unique([tradingAccountId, externalId], name: "unique_trade_external_id")
}

model TradeNote {
  id        String   @id @default(cuid())
  tradeId   String
  userId    String
  content   String
  attachments Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trade     Trade    @relation(fields: [tradeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([tradeId])
  @@index([userId])
}

model TradeTag {
  id        String   @id @default(cuid())
  userId    String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  trades    TradeTagAssignment[]

  @@unique([userId, label])
}

model TradeTagAssignment {
  tradeId String
  tagId   String

  trade   Trade   @relation(fields: [tradeId], references: [id])
  tag     TradeTag @relation(fields: [tagId], references: [id])

  @@id([tradeId, tagId])
}

model ImportFile {
  id               String        @id @default(cuid())
  userId           String
  tradingAccountId String?
  storageKey       String
  filename         String
  fileType         String        @default("text/csv")
  status           ImportStatus  @default(PENDING)
  rowCount         Int?
  hash             String?
  processedAt      DateTime?
  errorMessage     String?
  meta             Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user             User          @relation(fields: [userId], references: [id])
  tradingAccount   TradingAccount? @relation(fields: [tradingAccountId], references: [id])
  syncLogs         SyncLog[]

  @@index([userId])
  @@index([tradingAccountId])
  @@index([status])
}

model SyncLog {
  id               String      @id @default(cuid())
  tradingAccountId String?
  importFileId     String?
  status           SyncStatus  @default(QUEUED)
  type             String
  message          String?
  meta             Json?
  startedAt        DateTime?   @default(now())
  completedAt      DateTime?
  createdAt        DateTime    @default(now())

  tradingAccount   TradingAccount? @relation(fields: [tradingAccountId], references: [id])
  importFile       ImportFile?     @relation(fields: [importFileId], references: [id])

  @@index([tradingAccountId])
  @@index([importFileId])
  @@index([status])
}

/// Models below are required by NextAuth.js Prisma Adapter.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
